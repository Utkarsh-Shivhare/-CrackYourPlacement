class Solution {
public:
    vector<int> parent;
    vector<int> rank;
    vector<int> size;

    int find(int u) {
        if (parent[u] == u) {
            return u;
        }
        return parent[u] = find(parent[u]);
    }

    void Union(int u, int v) {
        int p_u = find(u);
        int p_v = find(v);

        if (p_u == p_v) {
            return;
        }

        if (rank[p_u] > rank[p_v]) {
            parent[p_v] = p_u;
            size[p_u] += size[p_v];
        } else if (rank[p_u] < rank[p_v]) {
            parent[p_u] = p_v;
            size[p_v] += size[p_u];
        } else {
            parent[p_v] = p_u;
            rank[p_u]++;
            size[p_u] += size[p_v];
        }
    }

    vector<vector<int>> adj = {{1,0}, {0,1}, {-1,0}, {0,-1}};

    void join(int i, int j, int &n, vector<vector<int>> &v, vector<vector<int>>& grid) {
        v[i][j] = 1;
        for (auto &a : adj) {
            int new_i = i + a[0];
            int new_j = j + a[1];
            if (new_i >= 0 && new_i < n && new_j >= 0 && new_j < n && !v[new_i][new_j] && grid[new_i][new_j]) {
                Union((i * n) + j, (new_i * n) + new_j);
                join(new_i, new_j, n, v, grid);  // Recursively join connected components
            }
        }
    }

    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        int total = n * n;

        rank.resize(total, 1);
        parent.resize(total);
        size.resize(total, 1);

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int comp = (i * n) + j;
                parent[comp] = comp;
            }
        }

        vector<vector<int>> visited(n, vector<int>(n, 0));

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1 && visited[i][j] == 0) {
                    join(i, j, n, visited, grid);
                }
            }
        }

        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    ans = max(ans, size[find((i * n) + j)]);
                }
            }
        }

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) {
                    int count = 1;
                    set<int> s;
                    for (auto &a : adj) {
                        int new_i = i + a[0];
                        int new_j = j + a[1];
                        if (new_i >= 0 && new_i < n && new_j >= 0 && new_j < n && grid[new_i][new_j]) {
                            int par = find((new_i * n) + new_j);
                            if (s.count(par) == 0) { 
                                count += size[par];
                                s.insert(par);
                            }
                        }
                    }
                    ans = max(ans, count);
                }
            }
        }

        return ans;
    }
};
