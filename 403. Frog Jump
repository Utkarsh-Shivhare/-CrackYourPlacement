class Solution {
public:
    int n;
    
    // Custom hash function for pair<int, int>
    struct pair_hash {
        template <class T1, class T2>
        size_t operator()(const pair<T1, T2>& p) const {
            auto hash1 = hash<T1>{}(p.first);
            auto hash2 = hash<T2>{}(p.second);
            return hash1 ^ hash2;
        }
    };
    
    unordered_map<pair<int,int>,int, pair_hash> dp;
    
    bool solve(int i, int k, vector<int>& stones){
        if(i == n - 1){
            return true;
        }
        if(dp.find({i, k}) != dp.end()){
            return dp[{i, k}] == -1 ? false : true;
        }
        int j = i + 1;
        bool ans = false;
        while(j < n && stones[j] <= stones[i] + k + 1){
            int diff = stones[j] - stones[i];
            if(diff == k || diff == k - 1 || diff == k + 1){
                ans = (ans || solve(j, diff, stones));
            }
            j++;
        }
        if(ans == false){
            dp[{i, k}] = -1;
        } else {
            dp[{i, k}] = 1;  
        }
        return ans;
    }
    
    bool canCross(vector<int>& stones) {
        n = stones.size();
        if(stones[1]-stones[0]==1)
        return solve(1, 1, stones);
        return false;
    }
};
