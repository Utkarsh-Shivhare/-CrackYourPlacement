class Solution {
public:
    vector<vector<int>> adj={{1,0},{0,1},{-1,0},{0,-1}};
    int m;
    int n;
    
    int DFS(int curr_i, int curr_j, vector<vector<int>> &v, vector<vector<int>> &score, vector<vector<int>>& matrix) {
        if (v[curr_i][curr_j] != 0) {
            return score[curr_i][curr_j];
        }
        v[curr_i][curr_j] = 1;
        
        for (auto &a : adj) {
            int new_i = curr_i + a[0];
            int new_j = curr_j + a[1];
            if (new_i >= 0 && new_i < m && new_j >= 0 && new_j < n && matrix[curr_i][curr_j] < matrix[new_i][new_j]) {
                score[curr_i][curr_j] = max(score[curr_i][curr_j], DFS(new_i, new_j, v, score, matrix) + 1);
            }
        }
        
        return score[curr_i][curr_j];
    }
    
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if (matrix.empty() || matrix[0].empty()) {
            return 0;
        }
        
        m = matrix.size();
        n = matrix[0].size();
        vector<vector<int>> v(m, vector<int>(n, 0));
        vector<vector<int>> score(m, vector<int>(n, 1));
        int ans = 1;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (v[i][j] == 0) {
                    ans = max(ans, DFS(i, j, v, score, matrix));
                }
            }
        }
        
        return ans;
    }
};
