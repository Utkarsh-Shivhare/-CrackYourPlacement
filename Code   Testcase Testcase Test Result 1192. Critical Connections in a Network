class Solution {
public:
    int time=1; 
    void dfs(int curr,int par,vector<int> &vis,vector<int> &low,vector<int> &tim, unordered_map<int,vector<int>> &adj,vector<vector<int>> &ans){
        vis[curr]=1;
        low[curr]=tim[curr]=time;
        time++;
        for(auto &v:adj[curr]){
            if(v==par) continue;
            if(!vis[v]){
                dfs(v,curr,vis,low,tim,adj,ans);
                low[curr]=min(low[curr],low[v]);
                if(tim[curr]<low[v]){
                    ans.push_back({curr,v});
                }
            }else{
                low[curr]=min(low[curr],low[v]);
            }
        }
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& cons) {
        unordered_map<int,vector<int>> adj;
        for(auto &a: cons){
            adj[a[0]].push_back(a[1]);
            adj[a[1]].push_back(a[0]);
        }
        vector<vector<int>> ans;
        vector<int> visited(n,0);
        vector<int> low(n);
        vector<int> tim(n);
        dfs(1,-1,visited,low,tim,adj,ans);
        return ans;
    }
};
